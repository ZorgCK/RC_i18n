
package com.xdev.jcon_19_i18n.ui;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.zone.ZoneRules;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import com.rapidclipse.framework.server.resources.CaptionUtils;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.H2;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.splitlayout.SplitLayout;
import com.vaadin.flow.data.provider.DataProvider;
import com.vaadin.flow.data.selection.SelectionEvent;
import com.vaadin.flow.data.selection.SelectionListener;
import com.vaadin.flow.router.Route;


@Route(value = "viewtimezone", layout = MainContainer.class)
public class ViewTimezones extends VerticalLayout
{
	Instant now;

	/**
	 *
	 */
	public ViewTimezones()
	{
		super();
		this.initUI();
		
		final Set<ZoneId> zoneIDs =
			ZoneId.getAvailableZoneIds().stream().map(z -> ZoneId.of(z)).collect(Collectors.toSet());

		this.grid.setDataProvider(DataProvider.ofCollection(zoneIDs));

		this.now = Instant.now();
		
		this.label2.setText(this.now.toString());
		this.label4.setText(LocalDateTime.now().toString());
		this.label6.setText(ZonedDateTime.now().toString());

		this.h2.setVisible(false);
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #button}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button_onClick(final ClickEvent<Button> event)
	{
		this.h2.setVisible(true);
	}
	
	/**
	 * Event handler delegate method for the {@link Grid} {@link #grid}.
	 *
	 * @see SelectionListener#selectionChange(SelectionEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void grid_selectionChange(final SelectionEvent<Grid<ZoneId>, ZoneId> event)
	{
		if(event.getFirstSelectedItem().isPresent())
		{
			this.h2.setText(this.now.atZone(ZoneId.of(event.getFirstSelectedItem().get().getId())).toString());
		}
		
	}

	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.splitLayout       = new SplitLayout();
		this.verticalLayout    = new VerticalLayout();
		this.grid              = new Grid<>(ZoneId.class, false);
		this.verticalLayout2   = new VerticalLayout();
		this.horizontalLayout  = new HorizontalLayout();
		this.label             = new Label();
		this.label2            = new Label();
		this.label7            = new Label();
		this.horizontalLayout2 = new HorizontalLayout();
		this.label3            = new Label();
		this.label4            = new Label();
		this.label8            = new Label();
		this.horizontalLayout3 = new HorizontalLayout();
		this.label5            = new Label();
		this.label6            = new Label();
		this.label9            = new Label();
		this.button            = new Button();
		this.h2                = new H2();
		
		this.setClassName("my-view my-view3");
		this.grid.addColumn(ZoneId::getId).setKey("id").setHeader(CaptionUtils.resolveCaption(ZoneId.class, "id"))
			.setSortable(true);
		this.grid
			.addColumn(v -> Optional.ofNullable(v).map(ZoneId::getRules).map(ZoneRules::isFixedOffset).orElse(null))
			.setKey("rules.fixedOffset").setHeader(CaptionUtils.resolveCaption(ZoneId.class, "rules.fixedOffset"))
			.setSortable(true);
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);
		this.label.setText("INSTAND");
		this.label2.setText("Label");
		this.label7.setText("Wird immer verwendet, wenn Werte in der Storage abgelegt werden.");
		this.label3.setText("LocalDateTime");
		this.label4.setText("Label");
		this.label8.setText("Wird meist nur im Renderin verwendet, wenn keine Timezones anwendbar sind.");
		this.label5.setText("ZonedDateTime");
		this.label6.setText("Label");
		this.label9.setText("Verwendung im Rendering mit Timezone relvanz.");
		this.button.setText("Anzeigen");
		this.h2.setText("H2");
		
		this.grid.setSizeFull();
		this.verticalLayout.add(this.grid);
		this.verticalLayout.setFlexGrow(1.0, this.grid);
		this.label.setWidth("150px");
		this.label.setHeight(null);
		this.label2.setSizeUndefined();
		this.horizontalLayout.add(this.label, this.label2);
		this.label3.setWidth("150px");
		this.label3.setHeight(null);
		this.label4.setSizeUndefined();
		this.horizontalLayout2.add(this.label3, this.label4);
		this.label5.setWidth("150px");
		this.label5.setHeight(null);
		this.label6.setSizeUndefined();
		this.horizontalLayout3.add(this.label5, this.label6);
		this.horizontalLayout.setWidthFull();
		this.horizontalLayout.setHeight(null);
		this.label7.setSizeUndefined();
		this.horizontalLayout2.setWidthFull();
		this.horizontalLayout2.setHeight(null);
		this.label8.setSizeUndefined();
		this.horizontalLayout3.setWidthFull();
		this.horizontalLayout3.setHeight(null);
		this.label9.setSizeUndefined();
		this.button.setSizeUndefined();
		this.h2.setSizeUndefined();
		this.verticalLayout2.add(this.horizontalLayout, this.label7, this.horizontalLayout2, this.label8,
			this.horizontalLayout3, this.label9, this.button, this.h2);
		this.splitLayout.addToPrimary(this.verticalLayout);
		this.splitLayout.addToSecondary(this.verticalLayout2);
		this.splitLayout.setSplitterPosition(30.0);
		this.splitLayout.setSizeFull();
		this.add(this.splitLayout);
		this.setFlexGrow(1.0, this.splitLayout);
		this.setSizeFull();
		
		this.grid.addSelectionListener(this::grid_selectionChange);
		this.button.addClickListener(this::button_onClick);
	} // </generated-code>
	
	// <generated-code name="variables">
	private Button           button;
	private SplitLayout      splitLayout;
	private VerticalLayout   verticalLayout, verticalLayout2;
	private HorizontalLayout horizontalLayout, horizontalLayout2, horizontalLayout3;
	private Grid<ZoneId>     grid;
	private Label            label, label2, label7, label3, label4, label8, label5, label6, label9;
	private H2               h2;
	// </generated-code>
	
}


package com.xdev.jcon_19_i18n.ui;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

import com.rapidclipse.framework.server.resources.CaptionUtils;
import com.rapidclipse.framework.server.resources.StringResourceUtils;
import com.rapidclipse.framework.server.ui.ItemLabelGeneratorFactory;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.dependency.HtmlImport;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.formlayout.FormLayout.FormItem;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.splitlayout.SplitLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.binder.ValidationException;
import com.vaadin.flow.data.provider.DataProvider;
import com.vaadin.flow.data.selection.SelectionEvent;
import com.vaadin.flow.data.selection.SelectionListener;
import com.vaadin.flow.router.Route;
import com.xdev.jcon_19_i18n.microstream.MicroStream;
import com.xdev.jcon_19_i18n.model.Customer;


@Route(value = "register", layout = MainContainer.class)
@HtmlImport("frontend://styles/shared-styles.html")
public class ViewRegister extends VerticalLayout
{
	
	private Customer customer;

	/**
	 *
	 */
	public ViewRegister()
	{
		super();
		this.initUI();
		
		this.customer = new Customer();
		this.binder.readBean(this.customer);
		
		final List<Customer> customers = MicroStream.root().getCustomers();
		this.grid.setDataProvider(DataProvider.ofCollection(customers));
		this.comboBox.setDataProvider(DataProvider.ofItems(Locale.getAvailableLocales()));
		
		final ArrayList<TimeZone> tzList = new ArrayList<>();
		Arrays.asList(TimeZone.getAvailableIDs()).stream().forEach(t -> {
			tzList.add(TimeZone.getTimeZone(t));
		});
		this.comboBox2.setDataProvider(DataProvider.ofCollection(tzList));
		
		this.comboBox2.setItemLabelGenerator(
			ItemLabelGeneratorFactory.NonNull(v -> CaptionUtils.resolveCaption(ViewRegister.displayTimeZone(v))));
	}
	
	private static String displayTimeZone(final TimeZone tz)
	{
		
		final long hours   = TimeUnit.MILLISECONDS.toHours(tz.getRawOffset());
		long       minutes = TimeUnit.MILLISECONDS.toMinutes(tz.getRawOffset())
			- TimeUnit.HOURS.toMinutes(hours);
		// avoid -4:-30 issue
		minutes = Math.abs(minutes);
		
		String result = "";
		if(hours > 0)
		{
			result = String.format("(GMT+%d:%02d) %s", hours, minutes, tz.getID());
		}
		else
		{
			result = String.format("(GMT%d:%02d) %s", hours, minutes, tz.getID());
		}
		
		return result;
		
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #button}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button_onClick(final ClickEvent<Button> event)
	{
		try
		{
			this.binder.writeBean(this.customer);
			this.customer.setLocale(this.comboBox.getValue().getLanguage());
			this.customer.setTimeZone(this.comboBox2.getValue().getID());
		}
		catch(final ValidationException e)
		{
			e.printStackTrace();
		}

		if(this.grid.getSelectedItems().isEmpty())
		{
			MicroStream.root().getCustomers().add(this.customer);
			MicroStream.storageManager().store(MicroStream.root().getCustomers());
		}
		else
		{
			MicroStream.storageManager().store(this.customer);
		}

		this.grid.getDataProvider().refreshAll();
	}

	/**
	 * Event handler delegate method for the {@link Grid} {@link #grid}.
	 *
	 * @see SelectionListener#selectionChange(SelectionEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void grid_selectionChange(final SelectionEvent<Grid<Customer>, Customer> event)
	{
		if(event.getFirstSelectedItem().isPresent())
		{
			this.customer = event.getFirstSelectedItem().get();
			this.binder.readBean(this.customer);

		}
	}

	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.splitLayout     = new SplitLayout();
		this.verticalLayout2 = new VerticalLayout();
		this.grid            = new Grid<>(Customer.class, false);
		this.verticalLayout  = new VerticalLayout();
		this.form            = new FormLayout();
		this.formItem        = new FormItem();
		this.lblFirstname    = new Label();
		this.txtFirstname    = new TextField();
		this.formItem2       = new FormItem();
		this.lblLastname     = new Label();
		this.txtLastname     = new TextField();
		this.formItem3       = new FormItem();
		this.comboBox        = new ComboBox<>();
		this.label           = new Label();
		this.formItem4       = new FormItem();
		this.comboBox2       = new ComboBox<>();
		this.label2          = new Label();
		this.binder          = new Binder<>();
		this.button          = new Button();
		
		this.setClassName("my-view my-view3");
		this.setPadding(false);
		this.setAlignItems(FlexComponent.Alignment.START);
		this.getStyle().set("overflow-x", "hidden");
		this.getStyle().set("overflow-y", "auto");
		this.grid.addColumn(Customer::getFirstname).setKey("firstname")
			.setHeader(CaptionUtils.resolveCaption(Customer.class, "firstname")).setSortable(true);
		this.grid.addColumn(Customer::getLastname).setKey("lastname")
			.setHeader(CaptionUtils.resolveCaption(Customer.class, "lastname")).setSortable(true);
		this.grid.addColumn(Customer::getLocale).setKey("locale")
			.setHeader(CaptionUtils.resolveCaption(Customer.class, "locale")).setSortable(true);
		this.grid.addColumn(Customer::getTimeZone).setKey("timeZone")
			.setHeader(CaptionUtils.resolveCaption(Customer.class, "timeZone")).setSortable(true);
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);
		this.form.setResponsiveSteps(
			new FormLayout.ResponsiveStep("0px", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP),
			new FormLayout.ResponsiveStep("500px", 2, FormLayout.ResponsiveStep.LabelsPosition.TOP),
			new FormLayout.ResponsiveStep("1000px", 3, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));
		this.lblFirstname.setText(StringResourceUtils.optLocalizeString("{$lblFirstname.text}", this));
		this.lblLastname.setText(StringResourceUtils.optLocalizeString("{$lblLastname.text}", this));
		this.comboBox.setItemLabelGenerator(ItemLabelGeneratorFactory
			.NonNull(v -> CaptionUtils.resolveCaption(v, "{%displayLanguage} - {%displayCountry}")));
		this.label.setText(StringResourceUtils.optLocalizeString("{$lblLanguage.text}", this));
		this.comboBox2.setItemLabelGenerator(
			ItemLabelGeneratorFactory.NonNull(v -> CaptionUtils.resolveCaption(v, "{%displayName} - {%rawOffset}")));
		this.label2.setText(StringResourceUtils.optLocalizeString("{$lblTimezone.text}", this));
		this.button.setText(StringResourceUtils.optLocalizeString("{$btnSave.text}", this));
		
		this.binder.forField(this.txtFirstname).withNullRepresentation("").bind(Customer::getFirstname,
			Customer::setFirstname);
		this.binder.forField(this.txtLastname).withNullRepresentation("").bind(Customer::getLastname,
			Customer::setLastname);
		
		this.grid.setSizeFull();
		this.verticalLayout2.add(this.grid);
		this.verticalLayout2.setFlexGrow(1.0, this.grid);
		this.lblFirstname.setSizeUndefined();
		this.lblFirstname.getElement().setAttribute("slot", "label");
		this.txtFirstname.setWidthFull();
		this.txtFirstname.setHeight(null);
		this.formItem.add(this.lblFirstname, this.txtFirstname);
		this.lblLastname.setSizeUndefined();
		this.lblLastname.getElement().setAttribute("slot", "label");
		this.txtLastname.setWidthFull();
		this.txtLastname.setHeight(null);
		this.formItem2.add(this.lblLastname, this.txtLastname);
		this.comboBox.setWidthFull();
		this.comboBox.setHeight(null);
		this.label.setSizeUndefined();
		this.label.getElement().setAttribute("slot", "label");
		this.formItem3.add(this.comboBox, this.label);
		this.comboBox2.setWidthFull();
		this.comboBox2.setHeight(null);
		this.label2.setSizeUndefined();
		this.label2.getElement().setAttribute("slot", "label");
		this.formItem4.add(this.comboBox2, this.label2);
		this.form.add(this.formItem, this.formItem2, this.formItem3, this.formItem4);
		this.form.setWidth(null);
		this.form.setHeightFull();
		this.button.setWidthFull();
		this.button.setHeight(null);
		this.verticalLayout.add(this.form, this.button);
		this.verticalLayout.setFlexGrow(1.0, this.button);
		this.splitLayout.addToPrimary(this.verticalLayout2);
		this.splitLayout.addToSecondary(this.verticalLayout);
		this.splitLayout.setSplitterPosition(60.0);
		this.splitLayout.setSizeFull();
		this.add(this.splitLayout);
		this.setFlexGrow(1.0, this.splitLayout);
		this.setSizeFull();
		
		this.grid.addSelectionListener(this::grid_selectionChange);
		this.button.addClickListener(this::button_onClick);
	} // </generated-code>
	
	// <generated-code name="variables">
	private FormLayout         form;
	private Binder<Customer>   binder;
	private ComboBox<TimeZone> comboBox2;
	private Button             button;
	private Grid<Customer>     grid;
	private SplitLayout        splitLayout;
	private VerticalLayout     verticalLayout2, verticalLayout;
	private Label              lblFirstname, lblLastname, label, label2;
	private ComboBox<Locale>   comboBox;
	private TextField          txtFirstname, txtLastname;
	private FormItem           formItem, formItem2, formItem3, formItem4;
	// </generated-code>
	
}


package com.xdev.jcon_19_i18n.ui;

import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.Arrays;
import java.util.Optional;

import com.rapidclipse.framework.server.data.converter.ConverterBuilder;
import com.rapidclipse.framework.server.data.format.NumberFormatBuilder;
import com.rapidclipse.framework.server.resources.CaptionUtils;
import com.rapidclipse.framework.server.resources.StringResourceUtils;
import com.rapidclipse.framework.server.ui.ItemLabelGeneratorFactory;
import com.rapidclipse.framework.server.ui.filter.FilterComponent;
import com.rapidclipse.framework.server.ui.filter.GridFilterSubjectFactory;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.datepicker.DatePicker;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.formlayout.FormLayout.FormItem;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.splitlayout.SplitLayout;
import com.vaadin.flow.component.textfield.NumberField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.provider.DataProvider;
import com.vaadin.flow.data.renderer.LocalDateTimeRenderer;
import com.vaadin.flow.data.renderer.NumberRenderer;
import com.vaadin.flow.data.selection.SelectionEvent;
import com.vaadin.flow.data.selection.SelectionListener;
import com.vaadin.flow.router.Route;
import com.xdev.jcon_19_i18n.microstream.MicroStream;
import com.xdev.jcon_19_i18n.model.Category;
import com.xdev.jcon_19_i18n.model.Product;


@Route(value = "products", layout = MainContainer.class)
public class ViewProducts extends VerticalLayout
{
	
	private Product product;
	
	/**
	 *
	 */
	public ViewProducts()
	{
		super();
		this.initUI();
		
		this.grid.setDataProvider(DataProvider.ofCollection(MicroStream.root().getProducts()));
		this.cmbCategory.setDataProvider(DataProvider.ofCollection(MicroStream.root().getCategories()));
		this.filterComponent.connectWith(this.grid);
	}
	
	/**
	 * Event handler delegate method for the {@link Grid} {@link #grid}.
	 *
	 * @see SelectionListener#selectionChange(SelectionEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void grid_selectionChange(final SelectionEvent<Grid<Product>, Product> event)
	{
		if(event.getFirstSelectedItem().isPresent())
		{
			this.product = event.getFirstSelectedItem().get();
			this.binder.readBean(this.product);
		}
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.splitLayout     = new SplitLayout();
		this.verticalLayout2 = new VerticalLayout();
		this.filterComponent = new FilterComponent();
		this.grid            = new Grid<>(Product.class, false);
		this.verticalLayout  = new VerticalLayout();
		this.form            = new FormLayout();
		this.formItem        = new FormItem();
		this.lblProductID    = new Label();
		this.txtProductID    = new TextField();
		this.formItem2       = new FormItem();
		this.lblProductName  = new Label();
		this.txtProductName  = new TextField();
		this.formItem3       = new FormItem();
		this.lblManufacturer = new Label();
		this.txtManufacturer = new TextField();
		this.formItem4       = new FormItem();
		this.lblCategory     = new Label();
		this.cmbCategory     = new ComboBox<>();
		this.formItem5       = new FormItem();
		this.lblAmount       = new Label();
		this.nrAmount        = new NumberField();
		this.formItem6       = new FormItem();
		this.lblLastAccess   = new Label();
		this.dateLastAccess  = new DatePicker();
		this.binder          = new Binder<>();

		this.setClassName("my-view my-view3");
		this.setJustifyContentMode(FlexComponent.JustifyContentMode.CENTER);
		this.setPadding(false);
		this.setDefaultHorizontalComponentAlignment(FlexComponent.Alignment.CENTER);
		this.grid.addColumn(Product::getProductID).setKey("productID")
			.setHeader(CaptionUtils.resolveCaption(Product.class, "productID")).setSortable(true);
		this.grid.addColumn(Product::getProductName).setKey("productName")
			.setHeader(CaptionUtils.resolveCaption(Product.class, "productName")).setSortable(true);
		this.grid
			.addColumn(
				v -> Optional.ofNullable(v).map(Product::getCategory).map(Category::getLocalizedValue).orElse(null))
			.setKey("category.localizedValue")
			.setHeader(CaptionUtils.resolveCaption(Product.class, "category.localizedValue")).setSortable(true);
		this.grid.addColumn(Product::getManufacturer).setKey("manufacturer")
			.setHeader(CaptionUtils.resolveCaption(Product.class, "manufacturer")).setSortable(true);
		this.grid
			.addColumn(new LocalDateTimeRenderer<>(Product::getLastAccess,
				DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT, FormatStyle.SHORT), "---"))
			.setKey("lastAccess").setHeader(CaptionUtils.resolveCaption(Product.class, "lastAccess")).setSortable(true);
		this.grid.addColumn(Product::getAmount).setKey("amount")
			.setHeader(CaptionUtils.resolveCaption(Product.class, "amount")).setSortable(true);
		this.grid
			.addColumn(new NumberRenderer<>(Product::getLocalizedPrice, NumberFormatBuilder.Currency().build(), ""))
			.setKey("localizedPrice").setHeader(CaptionUtils.resolveCaption(Product.class, "localizedPrice"))
			.setSortable(true);
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);
		this.form.setResponsiveSteps(
			new FormLayout.ResponsiveStep("0px", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP),
			new FormLayout.ResponsiveStep("500px", 2, FormLayout.ResponsiveStep.LabelsPosition.TOP),
			new FormLayout.ResponsiveStep("1000px", 3, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));
		this.lblProductID.setText(StringResourceUtils.optLocalizeString("{$attribute.productID}", this));
		this.txtProductID.setTabIndex(1);
		this.lblProductName.setText(StringResourceUtils.optLocalizeString("{$attribute.productname}", this));
		this.txtProductName.setTabIndex(2);
		this.lblManufacturer.setText(StringResourceUtils.optLocalizeString("{$attribute.manufacturer}", this));
		this.txtManufacturer.setTabIndex(3);
		this.lblCategory.setText(StringResourceUtils.optLocalizeString("{$attribute.category}", this));
		this.cmbCategory.setTabIndex(4);
		this.cmbCategory.setItemLabelGenerator(ItemLabelGeneratorFactory.NonNull(Category::getLocalizedValue));
		this.lblAmount.setText(StringResourceUtils.optLocalizeString("{$attribute.amount}", this));
		this.nrAmount.setTabIndex(5);
		this.lblLastAccess.setText(StringResourceUtils.optLocalizeString("{$attribute.lastAccess}", this));
		this.dateLastAccess.setTabIndex(6);

		this.binder.forField(this.txtProductID).withNullRepresentation("").bind(Product::getProductID,
			Product::setProductID);
		this.binder.forField(this.txtProductName).withNullRepresentation("").bind(Product::getProductName,
			Product::setProductName);
		this.binder.forField(this.txtManufacturer).withNullRepresentation("").bind(Product::getManufacturer,
			Product::setManufacturer);
		this.binder.forField(this.cmbCategory).bind(Product::getCategory, Product::setCategory);
		this.binder.forField(this.nrAmount).withConverter(ConverterBuilder.DoubleToBigDecimal().build())
			.bind(Product::getAmount, Product::setAmount);
		this.binder.forField(this.dateLastAccess).withNullRepresentation(LocalDate.of(2019, Month.SEPTEMBER, 10))
			.withConverter(ConverterBuilder.LocalDateToLocalDateTime().build())
			.bind(Product::getLastAccess, Product::setLastAccess);

		this.filterComponent.connectWith(this.grid.getDataProvider());
		this.filterComponent.setFilterSubject(GridFilterSubjectFactory.CreateFilterSubject(this.grid,
			Arrays.asList("productID", "productName", "category.localizedValue", "manufacturer"),
			Arrays.asList("productID",
				"productName", "category.localizedValue", "manufacturer", "lastAccess", "amount", "localizedPrice")));

		this.filterComponent.setWidthFull();
		this.filterComponent.setHeight(null);
		this.grid.setSizeFull();
		this.verticalLayout2.add(this.filterComponent, this.grid);
		this.verticalLayout2.setFlexGrow(1.0, this.grid);
		this.lblProductName.setSizeUndefined();
		this.lblProductName.getElement().setAttribute("slot", "label");
		this.txtProductName.setWidthFull();
		this.txtProductName.setHeight(null);
		this.formItem2.add(this.lblProductName, this.txtProductName);
		this.lblManufacturer.setSizeUndefined();
		this.lblManufacturer.getElement().setAttribute("slot", "label");
		this.txtManufacturer.setWidthFull();
		this.txtManufacturer.setHeight(null);
		this.formItem3.add(this.lblManufacturer, this.txtManufacturer);
		this.lblCategory.setSizeUndefined();
		this.lblCategory.getElement().setAttribute("slot", "label");
		this.cmbCategory.setWidthFull();
		this.cmbCategory.setHeight(null);
		this.formItem4.add(this.lblCategory, this.cmbCategory);
		this.lblAmount.setSizeUndefined();
		this.lblAmount.getElement().setAttribute("slot", "label");
		this.nrAmount.setWidthFull();
		this.nrAmount.setHeight(null);
		this.formItem5.add(this.lblAmount, this.nrAmount);
		this.lblLastAccess.setSizeUndefined();
		this.lblLastAccess.getElement().setAttribute("slot", "label");
		this.dateLastAccess.setWidthFull();
		this.dateLastAccess.setHeight(null);
		this.formItem6.add(this.lblLastAccess, this.dateLastAccess);
		this.form.add(this.formItem, this.formItem2, this.formItem3, this.formItem4, this.formItem5, this.formItem6);
		this.form.setSizeUndefined();
		this.verticalLayout.add(this.form);
		this.splitLayout.addToPrimary(this.verticalLayout2);
		this.splitLayout.addToSecondary(this.verticalLayout);
		this.splitLayout.setSplitterPosition(60.0);
		this.splitLayout.setSizeFull();
		this.add(this.splitLayout);
		this.setFlexGrow(1.0, this.splitLayout);
		this.setSizeFull();

		this.grid.addSelectionListener(this::grid_selectionChange);
	} // </generated-code>
	
	// <generated-code name="variables">
	private FormLayout         form;
	private SplitLayout        splitLayout;
	private DatePicker         dateLastAccess;
	private NumberField        nrAmount;
	private VerticalLayout     verticalLayout2, verticalLayout;
	private Label              lblProductID, lblProductName, lblManufacturer, lblCategory, lblAmount, lblLastAccess;
	private Binder<Product>    binder;
	private FilterComponent    filterComponent;
	private Grid<Product>      grid;
	private TextField          txtProductID, txtProductName, txtManufacturer;
	private FormItem           formItem, formItem2, formItem3, formItem4, formItem5, formItem6;
	private ComboBox<Category> cmbCategory;
	// </generated-code>
	
}
